<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1475875142279">{:repl-history {:ide [], :local [&quot;(binding [*print-length* 1]\n  (time (println (vec (map fac (vec (range 0 9000)))))))&quot; &quot;(infix 1 + 2)&quot; &quot;(infix 1 + 2 +)&quot; &quot;(infix 1 + 2 * 3)&quot; &quot;(infix 1 2 + 3)&quot; &quot;(infix 1 2 3)&quot; &quot;(infix 1 * [2 + 3 * 4] mod 4)&quot; &quot;(infix 3 * [2 + 3 * 4] mod 4)&quot; &quot;(infix 2 * [2 + 3 * 4] mod 4)&quot; &quot;(infix 10 * [2 + 3 * 4] mod 4)&quot; &quot;(infix [2 + 3 * 4] mod 4)&quot; &quot;(infix [1 + 3 * 4] mod 4)&quot; &quot;(infix [4 + 3 * 4] mod 4)&quot; &quot;(infix [3 * 4] mod 4)&quot; &quot;(infix 4 mod 4)&quot; &quot;(infix 12 mod 4)&quot; &quot;(infix 3 mod 4)&quot; &quot;(infix 3 - 1)&quot; &quot;(infix 10 + [2 + 3 * 4] mod 4)&quot; &quot;(infix 10 + (2 + 3 * 4) mod 4)&quot; &quot;(infix (10 + (2 + 3 * 4)) mod 4)&quot; &quot;(infix (10 + (2 + 3 * 4)) rem 4)&quot; &quot;(infix (10 + (2 + 3 * 4)) rem 4 - 10)&quot; &quot;(infix (10 + (2 + 3 * 4)) rem 4 quot 10)&quot; &quot;(infix (10 + (2 + 3 * 4)) quot 4)&quot; &quot;(infix (10 + (2 + 3 * 4)) quot 4 rem 8)&quot; &quot;(infix (10 + (2 + 3 * 4)) quot 4 rem 5)&quot; &quot;(infix (10 + (2 + 3 * 4)) quot (4 rem 5))&quot; &quot;(infix (10 + (2 + 3 * 4)) rem (4 rem 5))&quot; &quot;(infix (10 + (2 + 3 * 4)) rem (17 quot 5))&quot; &quot;(infix (11 + (2 + 3 * 4)) rem (17 quot 5))&quot; &quot;(infix (11 - (2 + 3 * 4)) rem (17 quot 5))&quot; &quot;(rem (- 19 (+ 2 (* 3 4))) (quot 17 5))&quot; &quot;(infix (19 - (2 + 3 * 4)) rem (17 quot 5))&quot; &quot;(infix 1 2)&quot; &quot;(infix 1 2 +)&quot; &quot;(infix 1 2 + 3 *)&quot; &quot;(infix 1 2 + 3 * 2)&quot; &quot;(infix 1 - 2 + 3 * 2)&quot; &quot;(infix 1 - 2 + 3 * 2 +)&quot; &quot;(infix 1 - 2 + 3 * 2 + -)&quot; &quot;(infix 1 - 2 + 3 * 2 + 3 mod 4)&quot; &quot;(infix 1 + -2 + 3 * 2 + 3 mod 4)&quot; &quot;(infix 1 + (- 2) + 3 * 2 + 3 mod 4)&quot; &quot;(infix 1 - 2 + 3 * 2 + 3 mod 4 +)&quot; &quot;(infix 1 - 2 + 3 * 2 + 3 modd 4)&quot; &quot;(infix 3 modd 3)&quot; &quot;(infix 3)&quot; &quot;(infix 1 + (inccc 1))&quot; &quot;(infix 1 inc (inc 1))&quot; &quot;(infix (Math/sin (infix Math/PI / 2)))&quot; &quot;(infix 1 + (inc 1))&quot; &quot;(infix 1 + (2 * (inc 1)))&quot; &quot;(infix (1 + (2 * (inc 1))) + 6)&quot; &quot;(macroexpand '(infix (1 + (2 * (inc 1))) + 6))&quot; &quot;(macroexpand '(infix ((1 + 2) *(inc 1)) + 6))&quot; &quot;(infix ((1 + 2) *(inc 1)) + 6)&quot; &quot;(fn? 1)&quot; &quot;(fn? (eval 'Math/PI))&quot; &quot;(fn? (eval '(1 2 3)))&quot; &quot;(fn? 'Math/PI)&quot; &quot;(fn? '+)&quot; &quot;(fn? +)&quot; &quot;(infix (Math/PI * (inc 1)) + 6)&quot; &quot;(infix (((1 - -1) + 2) *(inc 1)) + 6)&quot; &quot;(infix (((1 - -1) + 2) * (inc 1)) + 6)&quot; &quot;(infix ((((2 + 2) + 2) + 2) + (Math/sin (/ Math/PI 2))) )&quot; &quot;(fn? Math/sin)&quot; &quot;(special-symbol? Math/sin)&quot; &quot;(special-symbol? 'Math/sin)&quot; &quot;(symbol? 'Math/sin)&quot; &quot;(deref 'Math/sin)&quot; &quot;(var 'Math/sin)&quot; &quot;(special-symbol? 'if)&quot; &quot;(clojure.test/function? Math/sin)&quot; &quot;(clojure.test/function? 'Math/sin)&quot; &quot;(clojure.test/function? +)&quot; &quot;(clojure.test/function? '+)&quot; &quot;(clojure.test/function? `+)&quot; &quot;(clojure.test/function? '(fn [x] x))&quot; &quot;(clojure.test/function? (fn [x] x))&quot; &quot;(clojure.test/function? (try\n             (eval Math/PI)\n             (catch Exception e\n               nil)))&quot; &quot;(clojure.test/function? (try\n             (eval Math/sin)\n             (catch Exception e\n               nil)))&quot; &quot;(try\n  (eval Math/sin)\n  (catch Exception e\n    nil))&quot; &quot;(try\n  (eval Math/sin)\n  (catch Throwable e\n    nil))&quot; &quot;(try\n  (eval Math/PI)\n  (catch Throwable e\n    nil))&quot; &quot;(class Math/sin)&quot; &quot;(infix 1 + (Math/sin Math/PI))&quot; &quot;*e&quot; &quot;(infix (inc 1))&quot; &quot;(infix (dec 2) + (inc 1))&quot; &quot;(infix (dec 2) / (inc 1))&quot; &quot;(infix (dec 2) * (inc 1))&quot; &quot;(infix (dec 2) / (inc 1) + (Math/sin 123))&quot; &quot;(infix ((1 + 2) * (inc 1)) + 6)&quot; &quot;(infix ([1 + 2] * (inc 1)) + 6)&quot; &quot;(infix [[1 + 2] * (inc 1)] + 6)&quot; &quot;(infix (Math/sin Math/PI))&quot; &quot;(infix ((((2 + 2) + 2) + 2)))&quot; &quot;(infix [[[2 + 2] + 2] + 2])&quot; &quot;(infix [[[2 + -2] + 2] + -2])&quot;], :remote []}}</component>
</project>